generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  password         String
  role             Role              @default(USER)
  permissions      Permission[]      @default([])
  businessId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  businessProfile  BusinessProfile?
  inventoryChanges InventoryChange[]
  onboarding       Onboarding?
  paymentConfig    PaymentConfig?
  products         Product[]
  sales            Sale[]
  sessions         Session[]
  employer         User?             @relation("BusinessEmployees", fields: [businessId], references: [id])
  employees        User[]            @relation("BusinessEmployees")
}

model Product {
  id               String            @id @default(cuid())
  sku              String
  name             String
  description      String?
  unitCost         Float?
  sellingPrice     Float?
  stockQuantity    Int?
  location         String?
  category         String?
  size             String?
  color            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           String
  documents        Document[]
  images           Image[]
  inventoryChanges InventoryChange[]
  createdBy        User              @relation(fields: [userId], references: [id])
  sales            SaleItem[]

  @@unique([sku, userId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id            String        @id @default(cuid())
  totalAmount   Float
  paymentStatus PaymentStatus
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  createdBy     User          @relation(fields: [userId], references: [id])
  items         SaleItem[]
}

model SaleItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  saleId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])
}

model BusinessProfile {
  id           String   @id @default(cuid())
  businessName String
  industry     String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  phone        String?
  website      String?
  taxId        String?
  logo         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model StepData {
  id           String     @id @default(cuid())
  stepId       String
  data         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  onboardingId String
  onboarding   Onboarding @relation(fields: [onboardingId], references: [id], onDelete: Cascade)

  @@unique([onboardingId, stepId])
}

model Onboarding {
  id             String     @id @default(cuid())
  completed      Boolean    @default(false)
  completedSteps String[]   @default([])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  completedAt    DateTime?
  userId         String     @unique
  user           User       @relation(fields: [userId], references: [id])
  stepData       StepData[]
}

model PaymentConfig {
  id                    String   @id @default(cuid())
  acceptCash            Boolean  @default(true)
  acceptCardPayments    Boolean  @default(false)
  acceptInvoicePayments Boolean  @default(false)
  stripeEnabled         Boolean  @default(false)
  stripeAccountId       String?
  stripeConnected       Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InventoryChange {
  id        String   @id @default(cuid())
  type      String
  quantity  Int
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  MANAGER
  SALES_REP
  INVENTORY_MANAGER
}

enum Permission {
  MANAGE_INVENTORY
  MANAGE_SALES
  VIEW_REPORTS
  MANAGE_EMPLOYEES
  MANAGE_SETTINGS
  VIEW_ANALYTICS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  STRIPE
}
